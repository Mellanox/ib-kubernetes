name: push-main
on:
  push:
    branches:
      - main
jobs:
  build-push-amd64:
    runs-on: ubuntu-latest
    steps:
      - name: Set repository as lower-case output variable
        id: repo_name
        run: echo ::set-output name=repository::$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ steps.repo_name.outputs.repository }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push to GitHub Container Registry
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: |
            ghcr.io/${{ steps.repo_name.outputs.repository }}:latest-amd64
          labels: ${{ steps.docker_meta.outputs.labels }}
          file: ./Dockerfile

  create-push-manifest:
    needs: [build-push-amd64]
    runs-on: ubuntu-latest
    steps:
      - name: Set repository as lower-case output variable
        id: repo_name
        run: echo ::set-output name=repository::$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create manifest for multi-arch images
        env:
          REPOSITORY: ghcr.io/${{ steps.repo_name.outputs.repository }}
        run: |
          # Get artifacts from previous steps
          docker pull ${{ env.REPOSITORY }}:latest-amd64
          # Create and update manifest
          docker manifest create ${{ env.REPOSITORY }}:latest ${{ env.REPOSITORY }}:latest-amd64
          docker manifest annotate ${{ env.REPOSITORY }}:latest ${{ env.REPOSITORY }}:latest-amd64 --arch amd64
          # Push manifest
          docker manifest push ${{ env.REPOSITORY }}:latest
