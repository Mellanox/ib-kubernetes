// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	k8s_cni_cncf_iov1 "github.com/k8snetworkplumbingwg/network-attachment-definition-client/pkg/apis/k8s.cni.cncf.io/v1"
	corev1 "k8s.io/api/core/v1"

	mock "github.com/stretchr/testify/mock"

	rest "k8s.io/client-go/rest"

	types "k8s.io/apimachinery/pkg/types"

	v1 "k8s.io/client-go/kubernetes/typed/coordination/v1"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// GetCoordinationV1 provides a mock function with no fields
func (_m *Client) GetCoordinationV1() v1.CoordinationV1Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCoordinationV1")
	}

	var r0 v1.CoordinationV1Interface
	if rf, ok := ret.Get(0).(func() v1.CoordinationV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.CoordinationV1Interface)
		}
	}

	return r0
}

// GetNetworkAttachmentDefinition provides a mock function with given fields: namespace, name
func (_m *Client) GetNetworkAttachmentDefinition(namespace string, name string) (*k8s_cni_cncf_iov1.NetworkAttachmentDefinition, error) {
	ret := _m.Called(namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkAttachmentDefinition")
	}

	var r0 *k8s_cni_cncf_iov1.NetworkAttachmentDefinition
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*k8s_cni_cncf_iov1.NetworkAttachmentDefinition, error)); ok {
		return rf(namespace, name)
	}
	if rf, ok := ret.Get(0).(func(string, string) *k8s_cni_cncf_iov1.NetworkAttachmentDefinition); ok {
		r0 = rf(namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*k8s_cni_cncf_iov1.NetworkAttachmentDefinition)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPods provides a mock function with given fields: namespace
func (_m *Client) GetPods(namespace string) (*corev1.PodList, error) {
	ret := _m.Called(namespace)

	if len(ret) == 0 {
		panic("no return value specified for GetPods")
	}

	var r0 *corev1.PodList
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*corev1.PodList, error)); ok {
		return rf(namespace)
	}
	if rf, ok := ret.Get(0).(func(string) *corev1.PodList); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.PodList)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRestClient provides a mock function with no fields
func (_m *Client) GetRestClient() rest.Interface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRestClient")
	}

	var r0 rest.Interface
	if rf, ok := ret.Get(0).(func() rest.Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rest.Interface)
		}
	}

	return r0
}

// PatchPod provides a mock function with given fields: pod, patchType, patchData
func (_m *Client) PatchPod(pod *corev1.Pod, patchType types.PatchType, patchData []byte) error {
	ret := _m.Called(pod, patchType, patchData)

	if len(ret) == 0 {
		panic("no return value specified for PatchPod")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*corev1.Pod, types.PatchType, []byte) error); ok {
		r0 = rf(pod, patchType, patchData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetAnnotationsOnPod provides a mock function with given fields: pod, annotations
func (_m *Client) SetAnnotationsOnPod(pod *corev1.Pod, annotations map[string]string) error {
	ret := _m.Called(pod, annotations)

	if len(ret) == 0 {
		panic("no return value specified for SetAnnotationsOnPod")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*corev1.Pod, map[string]string) error); ok {
		r0 = rf(pod, annotations)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
